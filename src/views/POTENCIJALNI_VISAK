

ovo je sa baselayouta za prikaz u zavisnosti od registracije.


<!-- <div style="display: flex; justify-content: space-between;">
          <div v-if="selectedLabels.Ponuda && routeName === 'Welcome' " class="ion-text-left">
            <ion-button color="dark" size="large" type="submit" fill="solid">Ponuda</ion-button>
          </div>

          <div v-if="selectedLabels.Crtanje && routeName === 'Welcome' " class="ion-text-right">
            <ion-button color="dark" size="large" type="submit" fill="solid" :router-link="{ path:'/crtanje'}" >Crtanje</ion-button>
          </div>

          <div v-if="selectedLabels.Programiranje && routeName === 'Welcome' " class="ion-text-center">
            <ion-button color="dark" size="large" type="submit" fill="solid">Programiranje</ion-button>
          </div>
        </div>
          
        <div style="display: flex; justify-content: space-between;">
          <div v-if="selectedLabels.PripremaZaSjecenje && routeName === 'Welcome' " class="ion-text-left">
            <ion-button color="dark" size="large" type="submit" fill="solid">Prip(sjecenje)</ion-button>
          </div>

          <div v-if="selectedLabels.Sjecenje && routeName === 'Welcome' " class="ion-text-right">
            <ion-button color="dark" size="large" type="submit" fill="solid">Sjecenje</ion-button>
          </div>
        </div>
          
        <div style="display: flex; justify-content: space-between;">
          <div v-if="selectedLabels.PripremaZaFarbanje && routeName === 'Welcome' " class="ion-text-center">
            <ion-button color="dark" size="large" type="submit" fill="solid">Prip(farbanje)</ion-button>
          </div>

          <div v-if="selectedLabels.Farbanje && routeName === 'Welcome' " class="ion-text-center">
            <ion-button color="dark" size="large" type="submit" fill="solid">Farbanje</ion-button>
          </div>
        </div>

        <div style="display: flex; justify-content: space-between;">
          <div v-if="selectedLabels.Sklapanje && routeName === 'Welcome' " class="ion-text-center">
            <ion-button color="dark" size="large" type="submit" fill="solid">Sklapanje</ion-button>
          </div>

          <div v-if="selectedLabels.Predaja && routeName === 'Welcome' " class="ion-text-center">
            <ion-button color="dark" size="large" type="submit" fill="solid">Predaja</ion-button>
          </div>
        </div>
        
        <div style="display: flex; justify-content: space-between;">
          <div v-if="selectedLabels.Transport && routeName === 'Welcome' " class="ion-text-center">
            <ion-button color="dark" size="large" type="submit" fill="solid">Transport</ion-button>
          </div>

          <div v-if="selectedLabels.Fotografisanje && routeName === 'Welcome' " class="ion-text-center">
            <ion-button color="dark" size="large" type="submit" fill="solid">Fotografisanje</ion-button>
          </div>
        </div>

        
        <div style="display: flex; justify-content: space-between;">
          <div v-if="selectedLabels.Nabavka && routeName === 'Welcome' " class="ion-text-left">
            <ion-button color="dark" size="large" type="submit" fill="solid">Nabavka</ion-button>
          </div>

          <div v-if="selectedLabels.Alati && routeName === 'Welcome' " class="ion-text-right">
            <ion-button color="dark" size="large" type="submit" fill="solid">Alati</ion-button>
          </div>

          <div v-if="selectedLabels.Magacin && routeName === 'Welcome' " class="ion-text-center">
            <ion-button color="dark" size="large" type="submit" fill="solid" :router-link="{ path:'/magacin'}">
              Magacin
            </ion-button>
          </div>
        </div> -->



        <template>
          <ion-page>

            <app-header :title="pageTitle" @back="$router.back()" @signOut="signOut">
              <slot name="actions-end" slot="actions-end"></slot>
            </app-header>
        
        
            <ion-content>
              <slot name="content"></slot>
              <ion-grid>
                <ion-row>
                  <ion-col size="6" :key="photo" v-for="photo in photos">
                    <ion-img :src="photo.webviewPath"></ion-img>
                  </ion-col>
                </ion-row>
              </ion-grid>
            </ion-content>
        
        
            <app-footer :noteCount="noteCount" @setOpen="setOpen"></app-footer>
            
            <!-- <CustomModal :isOpen.sync="isOpenRef" :data="data" /> -->
            <!-- <CustomModal v-model:isOpen="isOpenRef" :data="data" /> -->
            <!-- <CustomModal v-model:isOpen="isOpenRef" :data="data" :newNote="newNote" />
             -->
             <!-- <CustomModal v-model:isOpen="isOpenRef" :data="data" v-model:newNote="newNote" /> -->
             <!-- <CustomModal v-model:isOpen="isOpenRef" :data="data" v-model:newNote="newNote" /> -->
        
        
         <ion-modal :is-open="isOpenRef" css-class="my-custom-class" @didDismiss="setOpen(false)">

              <ion-header>
                <ion-toolbar>
                  <ion-buttons slot="start">
                    <ion-button @click="setOpen(false)">
                      <ion-icon :icon="close"></ion-icon>
                    </ion-button>
                  </ion-buttons>
                  <ion-buttons slot="end">
                    <ion-button :strong="true" @click="confirmChanges">
                      <ion-icon :icon="checkmark"></ion-icon>
                    </ion-button>
                  </ion-buttons>
                </ion-toolbar>
              </ion-header>
              <Modal :data="data"></Modal>
              <ion-content class="ion-padding">
                <div class="input-button-container">
                  <ion-item style="flex-grow: 1">
                    <ion-input v-model="newNote" placeholder="Унеси биљешку"></ion-input>
                  </ion-item>
        
        
                  <!-- Add Note Button -->
                  <!-- <ion-button :strong="true" @click="addBiljeska" style="margin-left: 5px;">Add Note</ion-button> -->
                </div>
              </ion-content>
            </ion-modal> 
            
        
          </ion-page>
        </template>
        
        <script>
        
        import AppHeader from "./HeaderLayout.vue";
        import AppFooter from "./FooterLayout.vue";
        import CustomModal from "../reusable/addingTasks.vue";
        
        
        
        import {
          // IonInput,
          // IonBadge,
          // IonItem,
          IonPage,
          IonModal,
          toastController,
          loadingController,
          IonHeader,
          IonToolbar,
          IonTitle,
          IonContent,
          // IonBackButton,
          IonButton,
          // IonButtons,
          // IonMenuButton,
          IonCol,
          IonGrid,
          IonRow,
        } from "@ionic/vue";
        
        import {
          ellipse,
          notifications,
          square,
          triangle,
          star,
          camera,
          person,
          home,
          library,
          hammer,
          server,
          easel,
          logOut,
          checkmark,
          close,
          trash,
          arrowBack,
        } from "ionicons/icons";
        
        import { Browser } from "@capacitor/browser";
        import { isPlatform } from "@ionic/vue";
        
        import { defineComponent, ref, onMounted, watchEffect, watch } from "vue";
        import { useRouter, useRoute } from "vue-router";
        import { supabase } from "@/supabase";
        import ExploreContainer from "@/components/ExploreContainer.vue";
        
        import { usePhotoGallery } from "@/composables/usePhotoGallery";
        
        // import { store } from "@/store"; // Adjust the path according to your project structure
        // import store from "@/store";
        import { useStore } from 'vuex'
        
        
        export default defineComponent({
          props: ["pageTitle", "pageDefaultBackLink"],
          components: {
            AppHeader,
            AppFooter,
            // CustomModal,
        
            // IonInput,
            // IonBadge,
            IonPage,
            // IonItem,
            IonModal,
            IonHeader,
            IonToolbar,
            // IonTitle,
            IonContent,
            // IonBackButton,
            IonButton,
            // IonButtons,
            // IonMenuButton,
            IonCol,
            IonGrid,
            IonRow,
          },
        
        
        
          setup() {
            const router = useRouter();
            const routeName = router.currentRoute.value.name;
            const noteCount = ref(0);
        
            const store = useStore();
        
            const { photos, takePhoto } = usePhotoGallery();
        
            const selectedLabels = ref({
              Ponuda: false,
              Crtanje: false,
              Programiranje: false,
              PripremaZaSjecenje: false,
              Sjecenje: false,
              PripremaZaFarbanje: false,
              Farbanje: false,
              Sklapanje: false,
              Predaja: false,
              Transport: false,
              Fotografisanje: false,
              Nabavka: false,
              Magacin: false,
              Alati: false,
            });
        
            const isOpenRef = ref(false);
            const setOpen = (state) => (isOpenRef.value = state);
            const newNote = ref("");
            const user = ref(supabase.auth.getUser());
            // const usernew = ref(supabase.auth.getUser())
            const usernew = ref(null)
        
            const route = useRoute();
        
        
            const navigateTo = (route) => {
              setTimeout(() => {
                router.push(route);
              }, 0);
            };
        
            const addNote = async () => {
              try {
                console.log("newNote:", newNote.value);
                // console.log("user:", user.value);  // Add this line
        
                // user.value = supabase.auth.getUser();
        
                const usernewResolved = await usernew.value;
                // currentUserID.value = usernewResolved.data.user.id;
                // console.log('user je', usernewResolved.davalue);
                console.log('USEEEEEr', usernewResolved.data.user.id);
                console.log('USEEEEEr', usernewResolved.data.user.email);
        
                const { data: profile } = await supabase
                  .from('profiles')
                  .select('username')
                  .eq('id', usernewResolved.data.user.id)  // use user.value.id directly
                  .single();
        
        
                // Here, you should use user.value directly:
                if (newNote.value.trim() === "" || !user.value) {
                  console.log("Note value is empty or user is not logged in. Skipping insertion.");
                  return;
                }
        
                const { error } = await supabase.from("notes").insert([
                  {
                    homescreen: newNote.value,
                    user_id: usernewResolved.data.user.id,
                    kreator: profile.username,
                  },
                ]);
        
                if (error) throw error;
        
                console.log("Note added successfully");
                newNote.value = ""; // Clear the input after successful insertion
              } catch (error) {
                console.error("Error inserting note:", error);
              }
            };
        
        
            watchEffect(async () => {
              const { data, error } = await supabase.from("notes").select("*");
              if (error) {
                console.error("Error fetching notes:", error);
              } else {
                noteCount.value = data.length;
              }
            });
        
        
        
            const confirmChanges = async () => {
              // console.log('confirmChanges called, newNote:', newNote.value);
              addNote();
              setOpen(false);
            };
        
            onMounted(async () => {
              usernew.value = supabase.auth.getUser()
        
              const { data, error } = await supabase.from("notes").select("*");
              if (error) {
                console.error("Error fetching notes:", error);
              } else {
                noteCount.value = data.length;
              }
        
              console.log("sa mounteda", usernew.value);
        
            });
        
            watch(
              () => route.fullPath,
              async () => {
                usernew.value = supabase.auth.getUser();
                const { data, error } = await supabase.from("notes").select("*");
                if (error) {
                  console.error("Error fetching notes:", error);
                } else {
                  noteCount.value = data.length;
                }
        
                console.log("sa mounteda", usernew.value);
              }
            );
        
        
        
            const signOut = async () => {
              console.log("Logout button clicked");
              const loader = await loadingController.create({});
              const toast = await toastController.create({ duration: 5000 });
              await loader.present();
              try {
                const { error } = await supabase.auth.signOut();
                if (error) throw error;
        
                window.localStorage.clear();
                store.dispatch('signOut');
        
                const cookies = document.cookie.split(";");
        
                for (let i = 0; i < cookies.length; i++) {
                  const cookie = cookies[i];
                  const eqPos = cookie.indexOf("=");
                  const name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
                  document.cookie =
                    name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/";
                }
        
                // user.value = null;
                usernew.value = null;
                // Redirects after successfully logging out
                router.push({ name: "Entrance" });
              } catch (error) {
                toast.message = error.message;
                await toast.present();
              } finally {
                await loader.dismiss();
              }
            };
        
            return {
              notifications,
              signOut,
              takePhoto,
              photos,
              selectedLabels,
              routeName,
              person,
              camera,
              home,
              library,
              hammer,
              server,
              easel,
              isOpenRef,
              setOpen,
              confirmChanges,
              newNote,
              user,
              usernew,
              logOut,
              checkmark,
              close,
              noteCount,
              arrowBack,
              navigateTo,
              onMounted,
              // usernewResolved,
            };
          },
        
        
        });
        </script>
        
        <style scoped>
        ion-col {
          /* background-color: #135d54; */
          border: solid 1px #fff;
          color: #fff;
          text-align: center;
        }
        </style>
        





        <ion-footer>
          <ion-toolbar>
            <ion-button slot="start" fill="solid" tab="pocetna" @click="navigateTo('/home')" color="medium">
              <ion-icon :icon="home"></ion-icon>
            </ion-button>
            <!-- <ion-button slot="start" fill="solid" tab="pocetna" href="/home" color="medium">
              <ion-icon :icon="home"></ion-icon>
            </ion-button> -->
            <!-- <ion-button fill="solid" @click="takePhoto">
                <ion-icon :icon="camera"></ion-icon>
              </ion-button> -->
            <center>
              <ion-button id="open-modal" @click="setOpen(true)" color="medium">
                <ion-badge slot="end">{{ noteCount }}</ion-badge>
                <ion-icon :icon="notifications"></ion-icon>
              </ion-button>
            </center>
            <!-- <ion-button slot="end" fill="solid" tab="account" href="/account" color="medium">
              <ion-icon :icon="person"></ion-icon>
            </ion-button> -->
            <ion-button slot="end" fill="solid" tab="account" @click="navigateTo('/account')" color="medium">
              <ion-icon :icon="person"></ion-icon>
            </ion-button>
          </ion-toolbar>
        </ion-footer>










        <ion-modal :is-open="isOpenRef" css-class="my-custom-class" @didDismiss="setOpen(false)">
          <ion-header>
            <ion-toolbar>
              <ion-buttons slot="start">
                <ion-button @click="setOpen(false)">
                  <ion-icon :icon="close"></ion-icon>
                </ion-button>
              </ion-buttons>
              <!-- <ion-title>Notifikacija</ion-title> -->
              <ion-buttons slot="end">
                <ion-button :strong="true" @click="confirmChanges">
                  <ion-icon :icon="checkmark"></ion-icon>
                </ion-button>
              </ion-buttons>
            </ion-toolbar>
          </ion-header>
          <Modal :data="data"></Modal>
          <ion-content class="ion-padding">
            <div class="input-button-container">
              <ion-item style="flex-grow: 1">
                <ion-input v-model="newNote" placeholder="Унеси биљешку"></ion-input>
              </ion-item>
    
              <!-- Add Note Button -->
              <!-- <ion-button :strong="true" @click="addBiljeska" style="margin-left: 5px;">Add Note</ion-button> -->
            </div>
          </ion-content>
        </ion-modal>